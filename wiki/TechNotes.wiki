The example code uses five of the eight available cogs of the Propeller chip. A sixth is used only in setup mode when a PropPlug is connected, or when running ViewPort for debugging.

 * Main update loop
 * Receiver input processing
 * Servo output processing
 * Gyro input processing
 * Spin Interpreter
 * Serial I/O to terminal (during setup/debug only)

The same source code works for both the 2-axis PhuBar2 and the 3-axis PhuBar3.  The file Constants.spin has a version switch that can be set to either 2 or 3 to select which code is invoked. 

Most of the components are surface-mount devices.  The ITG-3200 is a QFN chip 4mmx4mm square, requiring fine soldering tools and skills that may be beyond the average hobbyist. 

While the Propeller chip normally uses a 32kb eeprom for storing of software, the PhuBar3 uses a 64kb eeprom so that user-set parameters can reside in the upper 32kb.  This way, the parameters for multiple helicopters can be retained even when software updates are loaded into eeprom, since the Propeller tool only loads the lower 32kb. 

The code that accepts input PWM from a receiver currently assumes pulses from the 4 channels come in sequentially and do not overlap.  Best results will be seen when a Spektrum receiver is used. See 'Opportunities' section below. 

Discussion of the development of PhuBar2 and subsequent PhuBar3, with flight test videos, can be found in an RCGroups thread here:

http://www.rcgroups.com/forums/showthread.php?t=1233263

More detail about PhuBar2 (2-axis) can be found here:

http://www.rcgroups.com/forums/member.php?u=187518    (Scroll to the very bottom to see the earliest blog entries)

Opportunities for others to contribute:
 * Improve tail servo handling with features found in high-end tail gyros
 * Improve receiver input code to make it handle a wider range of receivers, including those having overlapping pulses
 * Expand capabilities of the Spin code that drives the TextStar to include setup functions in addition to the tuning functions it handles now